#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

cat | jq . <&0 > /tmp/input

AMI=$(jq -r '.version.ami // empty' /tmp/input)

export ROLE_ID=$(jq -r '.source.role_id // empty' /tmp/input)
export ACCOUNT_ID=$(jq -r '.source.account_id // empty' /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' /tmp/input)

if [ ! -z "ACCOUNT_ID" ] && [ ! -z "ROLE_ID" ]; then
  export temp_credentials=$(aws sts assume-role --role-arn arn:aws:iam::$ACCOUNT_ID:role/$ROLE_ID --role-session-name cc-ami-resource-session)
  export AWS_ACCESS_KEY_ID=$(echo ${temp_credentials} | jq -r '.Credentials.AccessKeyId') AWS_SESSION_TOKEN=$(echo ${temp_credentials} | jq -r '.Credentials.SessionToken') AWS_SECRET_ACCESS_KEY=$(echo ${temp_credentials} | jq -r ' .Credentials.SecretAccessKey') AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
else
  export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' /tmp/input)
  export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' /tmp/input)
fi

# remove any empty credentials vars so the AWS client will try instance profiles
if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  unset AWS_ACCESS_KEY_ID
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  unset AWS_SECRET_ACCESS_KEY
fi

jq '.source.filters | to_entries | map({"Name": .key, "Values": [(.value|select(type!="array") = [.])|.[]|tostring]})' /tmp/input > /tmp/filters.json

aws ec2 describe-images \
  --filters file:///tmp/filters.json \
  --query 'sort_by(Images, &CreationDate)' \
  | jq '.[([.[] | .ImageId] | index("'$AMI'") // -2) + 1:] | [.[] | {ami: .ImageId}]' >&3
