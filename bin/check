#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

cat | jq . <&0 > /tmp/input

AMI=$(jq -r '.version.ami // empty' /tmp/input)

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' /tmp/input)
export AWS_ROLE_ARN=$(jq -r '.source.aws_role_arn // empty' /tmp/input)

# if role arn has been provided, assume role
if ! [ -z "$AWS_ROLE_ARN" ]; then
    aws sts assume-role \
      --duration 900 \
      --role-arn $AWS_ROLE_ARN \
      --role-session-name ci \
      --output json \
      > /tmp/session
    export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/session)
    export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/session)
    export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/session)
fi

# remove any empty credentials vars so the AWS client will try instance profiles
if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  unset AWS_ACCESS_KEY_ID
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  unset AWS_SECRET_ACCESS_KEY
fi

jq '.source.filters | to_entries | map({"Name": .key, "Values": [(.value|select(type!="array") = [.])|.[]|tostring]})' /tmp/input > /tmp/filters.json

aws ec2 describe-images \
  --filters file:///tmp/filters.json \
  --query 'sort_by(Images, &CreationDate)' \
  | jq '.[([.[] | .ImageId] | index("'$AMI'") // -2) + 1:] | [.[] | {ami: .ImageId}]' >&3
