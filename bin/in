#!/bin/sh
set -eu -o pipefail
exec 3>&1 1>&2

cat | jq . <&0 > /tmp/input

DEST="$1"

AMI=$(jq -r '.version.ami // empty' /tmp/input)

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // empty' /tmp/input)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // empty' /tmp/input)
export AWS_DEFAULT_REGION=$(jq -r '.source.region // empty' /tmp/input)
export AWS_ROLE_ARN=$(jq -r '.source.aws_role_arn // empty' /tmp/input)

# if role arn has been provided, assume role
if ! [ -z "$AWS_ROLE_ARN" ]; then
    aws sts assume-role \
      --duration 900 \
      --role-arn $AWS_ROLE_ARN \
      --role-session-name ci \
      --output json \
      > /tmp/session
    export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/session)
    export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/session)
    export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/session)
fi

# remove any empty credentials vars so the AWS client will try instance profiles
if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  unset AWS_ACCESS_KEY_ID
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  unset AWS_SECRET_ACCESS_KEY
fi

aws ec2 describe-images --image-ids "$AMI" --query 'Images[0]' \
  | tee "$DEST/output.json"

jq -r '.ImageId' < "$DEST/output.json" > "$DEST/id"

jq '{source_ami: .ImageId}' < "$DEST/output.json" > "$DEST/packer.json"

jq '.ImageId as $image | {Name, CreationDate, VirtualizationType, RootDeviceType} | to_entries | {metadata: map({name:.key, value:.value}), version: {ami: $image}}' < "$DEST/output.json" >&3
